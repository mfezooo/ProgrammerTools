<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        LTA2OjAw+xQpwAAAAABJRU5ErkJggg==
</value>
  </data>
</root>